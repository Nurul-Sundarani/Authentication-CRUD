const jwt = require('jwt-simple');
const User = require('../models/users');
const Items = require('../models/items');
const config = require('../config');

function tokenForUser(user) {
  const timestamp = new Date().getTime();
  // Here id is the one which is auto generated by MongoDB.
  return jwt.encode({ sub: user.id, iat: timestamp }, config.secret);
}

exports.signup = function(req, res, next) {
  const email = req.body.email;
  const password = req.body.password;

  if (!email || !password) {
    return res
      .status(422)
      .send({ error: 'You must provide email and password' });
  }

  //See if a user with the given email exist
  // User represents all Users
  //First parameter is the search criteria second one is the callback function
  User.findOne({ email: email }, function(err, existingUser) {
    // existingUser will be null if no user found.
    if (err) {
      return next(err);
    }
    // If a user with email does exist, return an error
    if (existingUser) {
      return res.status(422).send({ error: 'Email is in use' });
    }
    //If not create and save the record
    const user = new User({
      email: email,
      password: password
    });

    user.save(function(err) {
      if (err) {
        return next(err);
      }
      res.json({ token: tokenForUser(user) });
    });
  });
  //respond to request indictaing user was created.
};

exports.signin = function(req, res, next) {
  //User has already had their email and pwd auth'd just give them a token
  res.send({ token: tokenForUser(req.user) });
};

exports.insert = function(req, res, next) {
  const name = req.body.name;
  const price = req.body.price;

  if (!name || !price) {
    return res.status(422).send({ error: 'You must provide name and price' });
  }
  let obj = {
    name,
    price
  };

  let data = new Items(obj);

  data.save((err, results) => {
    console.log(results._id);
  });
};

exports.get = function(req, res, next) {
  Items.find((err, results) => {
    if (err) {
      return res.status(500).send(err);
    }
    return res.status(200).send(results);
  });
};

exports.delete = function(req, res, next) {
  Items.findByIdAndRemove(req.params.id, (err, results) => {
    if (err) return res.status(500).send(err);
    const response = {
      message: 'Successfully deleted',
      id: todo._id
    };
    return res.status(200).send(response);
  });
};

exports.update = function(req, res, next) {
  Items.findByIdAndUpdate(req.params.id, req.body, (err, results) => {
    if (err) return res.status(500).send(err);
    return res.send(results);
  });
};
